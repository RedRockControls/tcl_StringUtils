<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="TLicenceCheck" Id="{956fb829-3d39-4f18-93f1-663d7f281e58}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TLicenceCheck
VAR
    LicenceIdAsString : STRING(38);
    LicenceName : T_MaxString;
    StopTwinCAT_IfNotValid : BOOL;

    FB_GetLicenses1 : FB_GetLicenses;
    FallingEdge_Busy : TFallingEdge;
    ScanCount : UDINT;
    OnTimer_CheckComplete : TOnTimer(PresetTime := 0.1);
    StopTwinCAT : TC_Stop;
    LicenceId : GUID;
    i : UDINT;
    
    _IsValid : BOOL;
    _CheckComplete : BOOL;
    _StopTwinCAT : BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF _IsValid THEN
    RETURN;
END_IF

ScanCount := ScanCount + 1;

FB_GetLicenses1(
	bExecute:= TRUE, 
	tTimeout:= , 
	sNetId:= , 
	bBusy=> , 
	bError=> , 
	nErrorId=> , 
	nValidLicenses=> , 
	aValidLicenses=> , 
	nInvalidLicenses=> , 
	aInvalidLicenses=> );

IF FallingEdge_Busy.Test(FB_GetLicenses1.bBusy) THEN
    _CheckComplete := TRUE;
    IF FB_GetLicenses1.bError THEN
            F_LogError('Licence Check',F_FormatString1('Error %X retrieving TwinCAT licences',F_UDINT(FB_GetLicenses1.nErrorId)));
    ELSE
        IF FB_GetLicenses1.nValidLicenses > 0 THEN
            LicenceId := REGSTRING_TO_GUID(LicenceIdAsString);
            FOR i := 1 TO FB_GetLicenses1.nValidLicenses DO
                IF GuidsEqualByVal(FB_GetLicenses1.aValidLicenses[i].stLicenseId, LicenceId) THEN
                    _IsValid := TRUE;
                END_IF
            END_FOR
        END_IF	
    END_IF
    IF NOT _IsValid THEN
        IF StopTwinCAT_IfNotValid THEN
            F_LogError('Licence Check',F_FormatStringEx2('Licence "%s" with ID %s not found: TwinCAT will be stopped!',LicenceName,LicenceIdAsString));
            ScanCount := 0;
            OnTimer_CheckComplete.Run();
            _StopTwinCAT := TRUE;
        ELSE
            F_LogError('Licence Check',F_FormatStringEx2('Licence "%s" with ID %s not found.',LicenceName,LicenceIdAsString));
		END_IF
    END_IF
END_IF

IF _StopTwinCAT THEN
    IF ScanCount > 5 OR OnTimer_CheckComplete.Run() THEN // scan count used when cyclically executed, timer used where executed sporadically
        StopTwinCAT(
            NETID:= , 
            STOP:= TRUE, 
            TMOUT:= , 
            BUSY=> , 
            ERR=> , 
            ERRID=> );
	END_IF
END_IF

]]></ST>
    </Implementation>
    <Property Name="CheckComplete" Id="{0ff90642-3607-0263-0c69-dd287c732266}">
      <Declaration><![CDATA[PROPERTY CheckComplete : BOOL]]></Declaration>
      <Get Name="Get" Id="{15011636-50a3-086e-1892-aae861498e7f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CheckComplete := _CheckComplete;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{50e3fa82-e67c-02b0-1bc5-025b8c775bef}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
    LicenceIdAsString : STRING(38);
    LicenceName : T_MaxString;
    StopTwinCAT_IfNotValid : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.LicenceIdAsString         := LicenceIdAsString;
THIS^.LicenceName               := LicenceName;
THIS^.StopTwinCAT_IfNotValid    := StopTwinCAT_IfNotValid;
THIS^._IsValid                  := FALSE;
THIS^._CheckComplete            := FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsValid" Id="{63798fcc-1ea1-4dfc-a368-878ee7509127}">
      <Declaration><![CDATA[PROPERTY IsValid : BOOL]]></Declaration>
      <Get Name="Get" Id="{e81513e5-1770-4e87-a9b1-3430eb4a4d04}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsValid := _IsValid;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>